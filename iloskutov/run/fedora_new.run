assert_spec foc
assert_spec x86

#
# Build
#
set build_components {
	core
	init
	drivers/timer
	drivers/framebuffer
	drivers/uart
	server/rom_loopdev
	l4linux-ata
        drivers/acpi
}

lappend_if [have_spec     x86] build_components drivers/nic
lappend_if [have_spec     pci] build_components drivers/pci
lappend_if [have_spec     ps2] build_components drivers/input/ps2

build $build_components
create_boot_directory

#
# Config
#
set config  {
<config prio_levels="2">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="acpi">
		<resource name="RAM" quantum="6M"/>
		<binary name="acpi_drv"/>
		<provides>
			<service name="PCI"/>
			<service name="IRQ" />
		</provides>
		<route>
			<service name="PCI"> <any-child /> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
	<start name="pci_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="PCI"/></provides>
	</start>
	<start name="nic_drv.1">
		<binary name="nic_drv"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Nic"/></provides>
	</start>
	<start name="vesa_drv">
		<config width="1024" height="768" depth="16" buffered="no" />
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start>
#	<start name="uart_drv">
#		<resource name="RAM" quantum="1M"/>
#		<provides>
#			<service name="Uart"/>
#			<service name="Terminal"/>
#		</provides>
#		<config>
#			<policy label="fedora" uart="1"/>
#		</config>
#	</start>
	<start name="kdb_uart_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Terminal"/></provides>
		<config><policy label="fedora" uart="0"/></config>
	</start> 
	<start name="rom_loopdev">
		<resource name="RAM" quantum="3M"/>
		<provides>
			<service name="Block"/>
		</provides>
		<config file="fedora18.img" block_size="4096"/>
	</start>
	<start name="fedora">
		<binary name="l4linux-ata"/>
		<resource name="RAM" quantum="512M"/>
		<config args="mem=256M  l4x_rd=fedora-initrd.cpio.gz root=/dev/sda l4x_cpus=2 l4x_cpus_map=0,1 readonlyroot">
			<block label="sda"/>
		</config>
		<route>
			<service name="Block"> <child name="rom_loopdev"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
</config>}

install_config $config

#
# Boot modules
#
set boot_modules {
	core
	init
	timer
	kdb_uart_drv
	rom_loopdev
	l4linux-ata
	fedora-initrd.cpio.gz
	fedora18.img
        acpi_drv
}

lappend_if [have_spec     pci] boot_modules pci_drv
lappend_if [have_spec     ps2] boot_modules ps2_drv
lappend_if [have_spec    vesa] boot_modules vesa_drv
lappend_if [have_spec     x86] boot_modules nic_drv

set initrd_uri "http://ksyslabs.org/lib/exe/fetch.php?media=fedora-initrd.cpio.gz"
set rootfs_uri "http://ksyslabs.org/lib/exe/fetch.php?media=fedora18.img"
set disk_image "bin/hda.img"

if {![file exists bin/fedora-initrd.cpio.gz]} {
	puts "Download initramfs ..."
	exec >& /dev/null wget -c -O bin/fedora-initrd.cpio.gz $initrd_uri
}

if {![file exists bin/fedora18.img]} {
	puts "Download rootfs (use for login/password root/root) ..."
	exec >& /dev/null wget -c -O bin/fedora18.img $rootfs_uri
}

build_boot_image  [join $boot_modules " "]

#
# Qemu
#
#append qemu_args " -m 3072 "
append qemu_args " -m 1024 "
append qemu_args " -serial mon:stdio "
#append qemu_args " -serial pty"
append qemu_args " -smp 2,cores=2 "
append qemu_args " -net nic,model=e1000 -net user "

#
# Execute test case
#
run_genode_until forever
